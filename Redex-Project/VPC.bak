#lang racket

(require redex)

(define-language VPC
  (v ::= x y z)                          ;; expression variables
  (d ::= a b c)                          ;; dimension variables
  (D ::= number)                         ;; dimension names
  (δ ::= d D)                            ;; dimensions
  (ϕ ::= v d)                            ;; variables
  (s ::= l r)                            ;; selectors
  (* ::= @ λ)                            ;; abstraction annotations
  (e ::= κ (* (ϕ) e) (e e) v             ;; lambda calculus + constants
     (let v = e in e)                    ;; recursive let
     δ                                   ;; dimensions
     (δ e e)                             ;; choice
     (δ s -> e)                          ;; selection
     (any d from e in e else e)          ;; any dimension pick
     (the δ from e in e else e))         ;; specific dimension pick
  (ebar ::= κ D (* (ϕ) e) (D ebar ebar)) ;; values
  (σ ::= (split e on e e)                ;; split on
     (split e on e e else e)             ;; split on else
     (split e on any e e else e))        ;; split on any else
  #:binding-forms
  (* (ϕ) e #:refers-to ϕ))

(default-language VPC)

(define-metafunction VPC
  dims : e -> (δ ...)
  [(dims κ) ()]
  [(dims δ) ,(list (term δ))]
  [(dims (* (v) e)) (dims e)]
  [(dims (* (d) e)) ,(remove (term d) (term (dims e)))]
  [(dims (e_1 e_2)) ,(append (term (dims e_1)) (term (dims e_2)))]
  [(dims (δ e_1 e_2)) ,(append (list (term δ)) (term (dims e_1)) (term (dims e_2)))]
  [(dims (δ s -> e)) ,(remove (term δ) (term (dims e)))]
  [(dims (any d from e in e_1 else e_2)) ,(if (not (eq? '() (term (dims e))))
                                              (remove (term d) (term (dims e_1)))
                                              (term (dims e_2)))]
  [(dims (the δ from e in e_1 else e_2)) ,(if (not (eq? (member (term δ) (term (dims e))) #f))
                                              (term (dims e_1))
                                              (term (dims e_2)))])

(test-equal (term (dims κ)) (term ()))
(test-equal (term (dims 1)) (term (1)))
(test-equal (term (dims a)) (term (a)))
(test-equal (term (dims (@ (x) 1))) (term (1)))
(test-equal (term (dims (1 2))) (term (1 2)))
(test-equal (term (dims ((2 3) 4))) (term (2 3 4)))
(test-equal (term (dims (λ (a) (a 1)))) (term (1)))
(test-equal (term (dims (1 2 3))) (term (1 2 3)))
(test-equal (term (dims (1 (2 3) (4 5)))) (term (1 2 3 4 5)))
(test-equal (term (dims (3 l -> 3))) (term ()))
(test-equal (term (dims (any a from 2 in 3 else 4))) (term (3)))
(test-equal (term (dims (any a from 2 in (a 3) else 4))) (term (3)))
(test-equal (term (dims (any a from κ in 3 else 4))) (term (4)))
(test-equal (term (dims (the 1 from (1 2) in 3 else 4))) (term (3)))
(test-equal (term (dims (the 1 from (2 3) in 4 else 5))) (term (5)))

(define-metafunction VPC
  eval : σ -> e
  [(eval (split e_1 on (δ v_1 v_2) e_2)) ((λ (v_1) ((λ (v_2) e_2) (δ r -> e_1))) (δ l -> e_1))]
  [(eval (split e_1 on (δ v_1 v_2) e_2 else e_3)) (the δ from e_1 in (split e_1 on (δ v_1 v_2) e_2 else e_3))]
  [(eval (split e_1 on any (d v_1 v_2) e_2 else e_3)) (any d from e_1 in e_2 else e_3)])
  

(define -->VPC
  (reduction-relation
   VPC

   [--> (D l (D ebar_1 ebar_2))
        (D l -> ebar_1)
        Chc-Elim-L]

   [--> (D r (D ebar_1 ebar_2))
        (D r -> ebar_2)
        Chc-Elim-R]
   
   [--> (δ s -> κ)
        κ
        Sel-Idemp-K]

   [--> (δ s -> D)
        D
        Sel-Idemp-D]

   [--> ((λ (ϕ) e_1) e_2)
        (eval (split e_1 on any (d v_1 v_2) (d ((λ (ϕ) e_1) v_1) ((λ (ϕ) e_r) v_2)) else (substitute e_1 ϕ e_2)))
        App-Reduce]

   [--> ((@ (ϕ) e) e_1)
        (substitute e ϕ e_1)
        App@-Reduce]

   [--> (any d from ebar in e else e_1)
        (substitute e d ,(first (term (dims ebar))))
        (side-condition (not (eq? (term (dims ebar)) '())))
        Any-Reduce-Then]

   [--> (any d from ebar in e else e_1)
        e_1
        Any-Reduce-Else]

   [--> (the δ from ebar in e else e_1)
        e
        (side-condition (member (term δ) (term (dims ebar))))
        The-Reduce-Then]

   [--> (the δ from ebar in e else e_1)
        e_1
        The-Reduce-Else]

   [--> (δ s -> (let v = e in e_1))
        (let v = (δ s -> e) in (δ s -> e_1))
        Sel-Let]

   [--> ((δ e_1 e_2) e_3)
        (δ (e_1 (δ l -> e_3)) (e_2 (δ r -> e_3)))
        App-Chc]))

;; Chc-Elim-L
(test-equal
 (term
  ,(first
    (apply-reduction-relation*
     -->VPC
     (term (1 l (1 4 5))))))
 (term 4))

;; Sel-Idemp-K
(test-equal
 (term
  ,(first
    (apply-reduction-relation*
     -->VPC
     (term (1 l -> κ)))))
 (term κ))

;; Sel-Idemp-D
(test-equal
 (term
  ,(first
    (apply-reduction-relation*
     -->VPC
     (term (1 l -> 2)))))
 (term 2))

;; App@-Reduce
(test-equal
 (term
  ,(first
    (apply-reduction-relation*
     -->VPC
     (term ((@ (x) (x z)) y)))))
 (term (y z)))

;; App-Reduce-Then
(test-equal
 (term
  ,(first
    (apply-reduction-relation*
     -->VPC
     (term (any a from (1 2 3) in (a 4 5) else 3)))))
 (term (1 4 5)))

;; App-Reduce-Else
(test-equal
 (term
  ,(first
    (apply-reduction-relation*
     -->VPC
     (term (any a from κ in (a 4 5) else 3)))))
 (term 3))

;; The-Reduce-Then
(test-equal
 (term
  ,(first
    (apply-reduction-relation*
     -->VPC
     (term (the 1 from (1 2 3) in 4 else 5)))))
 (term 4))

;; The-Reduce-Else
(test-equal
 (term
  ,(first
    (apply-reduction-relation*
     -->VPC
     (term (the 1 from κ in 4 else 5)))))
 (term 5))

;; Sel-Let
(test-equal
 (term
  ,(first
    (apply-reduction-relation*
     -->VPC
     (term (a l -> (let x = 1 in 2))))))
 (term (let x = (a l -> 1) in (a l -> 2))))

;; App-Chc
(test-equal
 (term
  ,(first
    (apply-reduction-relation*
     -->VPC
     (term ((a 1 2) 3)))))
 (term (a (1 (a l -> 3)) (2 (a r -> 3)))))

(traces -->VPC (term ((a 1 2) 3)))

;; Sel-App
